// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Users {
  id           Int            @id @default(autoincrement())
  username     String         @db.Char(30)
  email        String         @unique
  role         Role           @default(USER)
  password     String
  RefreshToken RefreshToken[]
  Subscription Subscription[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  role      Role     @default(ADMIN)
  username  String
  password  String
  createdAt DateTime @default(now())
}

enum PlanType {
  DIET
  PROTEIN
  ROYALE
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Subscription {
  id           String             @id @default(uuid())
  userId       Int
  user         Users              @relation(fields: [userId], references: [id])
  name         String             @db.Char(50)
  phoneNumber  String             @db.VarChar(20)
  planType     PlanType
  mealTypes    String
  deliveryDays String
  allergies    String?            @db.Text
  totalPrice   Int
  status       SubscriptionStatus @default(ACTIVE)
  pauseStart   DateTime?
  pauseEnd     DateTime?
  cancelledAt  DateTime?
  resumeAt     DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Mealplan {
  id          String  @id @default(uuid())
  name        String  @unique
  description String? @db.Text
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String?
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    Int
  user      Users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model Testimonial {
  id        String   @id @default(uuid())
  name      String
  message   String
  rating    Int
  createdAt DateTime @default(now())
}
